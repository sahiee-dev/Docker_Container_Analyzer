#!/usr/bin/env python3
"""
Container Security Analyzer - Vulnerability Parser
Parses Trivy JSON output and analyzes vulnerabilities by severity
"""

import json
import sys
from collections import defaultdict

def load_scan_results(json_file):
    """Load and parse Trivy JSON scan results"""
    try:
        with open(json_file, 'r') as file:
            data = json.load(file)
        return data
    except FileNotFoundError:
        print(f"Error: Could not find file {json_file}")
        sys.exit(1)
    except json.JSONDecodeError:
        print(f"Error: Invalid JSON in file {json_file}")
        sys.exit(1)

def analyze_vulnerabilities(scan_data):
    """Analyze vulnerabilities by severity and return summary"""
    severity_counts = defaultdict(int)
    vulnerabilities = []
    
    # Navigate through the JSON structure
    if 'Results' in scan_data:
        for result in scan_data['Results']:
            if 'Vulnerabilities' in result:
                for vuln in result['Vulnerabilities']:
                    # Count by severity
                    severity = vuln.get('Severity', 'UNKNOWN')
                    severity_counts[severity] += 1
                    
                    # Store vulnerability details
                    vuln_info = {
                        'id': vuln.get('VulnerabilityID', 'N/A'),
                        'severity': severity,
                        'title': vuln.get('Title', 'N/A'),
                        'package': vuln.get('PkgName', 'N/A'),
                        'installed_version': vuln.get('InstalledVersion', 'N/A'),
                        'fixed_version': vuln.get('FixedVersion', 'Not Available')
                    }
                    vulnerabilities.append(vuln_info)
    
    return dict(severity_counts), vulnerabilities

def print_summary(json_file, severity_counts, total_vulns):
    """Print a formatted summary of vulnerabilities"""
    print(f"\n{'='*60}")
    print(f"VULNERABILITY SCAN SUMMARY: {json_file}")
    print(f"{'='*60}")
    
    print(f"Total Vulnerabilities Found: {total_vulns}")
    print(f"\nBreakdown by Severity:")
    print(f"-" * 30)
    
    # Define severity order for display
    severity_order = ['CRITICAL', 'HIGH', 'MEDIUM', 'LOW', 'NEGLIGIBLE', 'UNKNOWN']
    
    for severity in severity_order:
        count = severity_counts.get(severity, 0)
        if count > 0:
            print(f"{severity:12}: {count:4} vulnerabilities")
    
    print(f"{'='*60}")

def show_critical_vulns(vulnerabilities, limit=5):
    """Show details of critical vulnerabilities"""
    critical_vulns = [v for v in vulnerabilities if v['severity'] == 'CRITICAL']
    
    if critical_vulns:
        print(f"\nðŸš¨ TOP {min(limit, len(critical_vulns))} CRITICAL VULNERABILITIES:")
        print(f"-" * 50)
        
        for i, vuln in enumerate(critical_vulns[:limit], 1):
            print(f"{i}. {vuln['id']} - {vuln['package']}")
            print(f"   Title: {vuln['title'][:80]}...")
            print(f"   Installed: {vuln['installed_version']} â†’ Fix: {vuln['fixed_version']}")
            print()

def main():
    """Main function to run the vulnerability parser"""
    if len(sys.argv) != 2:
        print("Usage: python3 vulnerability_parser.py <json_file>")
        print("Example: python3 vulnerability_parser.py ../scan-results/nginx-scan.json")
        sys.exit(1)
    
    json_file = sys.argv[1]
    
    print("Loading scan results...")
    scan_data = load_scan_results(json_file)
    
    print("Analyzing vulnerabilities...")
    severity_counts, vulnerabilities = analyze_vulnerabilities(scan_data)
    
    total_vulns = len(vulnerabilities)
    
    # Display results
    print_summary(json_file, severity_counts, total_vulns)
    show_critical_vulns(vulnerabilities)

if __name__ == "__main__":
    main()
